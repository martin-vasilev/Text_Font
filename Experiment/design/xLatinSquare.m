%-----------------------------------------------------------%%   PROGRAM xLatinSquare.m                                  %%   by Antje Nuthmann                                       %%   23 OCT 2006                                             %%   test design for diploma thesis Kristin Göllner          %%-----------------------------------------------------------%% adapted to be used in BoundaryN1FQ% Sarah Risse, October 2010% Modified for a 2x2x4 design by Martin Vasilev, 2014% Modified for a clasical N+1 boundary design, 2015% Adapted as generic design generator by Martin Vasilev, 2019clear;close all;% Each sentence occurs/exists in 2 (noc) conditions.% A given participant will read a given sentence in one condition only. =>% latin square% CHANGED from 240nos = 100;  % number of sentences% CHANGED from 16noc = 4;    % number of conditions: 2%-------------% CONDITIONS: %% ------------% Manipulating font size and line length%----------------------------------%%     Font size		Line length    %%----------------------------------%% #1: 	small 		short		   %% #2: 	big 		short		   %% #3: 	small 		long		   %% #4: 	big 		long		   %%----------------------------------%if mod(nos,noc)>0   % nos muss durch noc teilbar sein (ohne Rest)%     fprintf(1,'\nnumber of sentences not compatible with number of conditions\n');    error('number of sentences not compatible with number of conditions');end% CHANGED from 15nol = 16;    % number of listsnosub = noc * nol;   % number of subjectsfprintf(1,'\n\nnumber of experimental conditions: %i',noc);fprintf(1,'\nnumber of sentences: %i',nos);fprintf(1,'\nnumber of subjects: %i\n',nosub);%-----------------------------------------------------------%%   1) create one package, using a latin square%-----------------------------------------------------------%design = zeros(nos,noc);  % number of subjects x number of conditions matrixstart_nr = 1;j = 1;while j <= nos    if start_nr == 1        vec = start_nr:noc;    else        vec = [start_nr:noc 1:start_nr-1];    end    design(j,1:noc)= vec;    start_nr = start_nr + 1;    if start_nr > noc        start_nr = 1;   % reset to 1    end    j = j + 1;end%-----------------------------------------------------------%% version 1: same list for each package of subjects% (but note that sentence presentation order in the experiment is random)%-----------------------------------------------------------%design_all = (1:nos)';for i=1:nol % for a given list/ package    design_all = [design_all design];endwhos design_allfout = fopen('design/design_same.dat','w');for i=1:size(design_all,1)	fprintf(fout,'\t%i',design_all(i,:));	fprintf(fout,'\n');endfclose(fout);	% close file pointer% %-----------------------------------------------------------%% % version 2: randomized design for the experiment% %-----------------------------------------------------------%% design_all_rand = (1:nos)';% for i=1:nol % for a given list/ package%     r = randperm(nos)';%     h = sortrows([r design],1);%     design_all_rand = [design_all_rand h(:,2:end)];% end% % whos design_all_rand% % in design_all_rand, the first column indicates the sentence number, otherwise:% % each column is a subject% % each row is a sentence% % the number carried in the matrix codes the experimental condition% fout = fopen('design_random.dat','w');	% open file pointer% for i=1:size(design_all_rand,1)% 	fprintf(fout,'\t%i',design_all_rand(i,:));% 	fprintf(fout,'\n');% end% fclose(fout);	% close file pointer% % % CHECK the sentences% % How often does a given sentence occur in any of the 4 conditions?% % answer: 'nol' times (e.g., 15 times)% % t = ones(1,noc)*nol;    % right answer% % vector 't' has as many elements as experiment has conditions% fprintf(1,'\nIn the whole study (i.e., when testing %i subjects), a given sentence will occur %i times in any of the %i conditions.\n',nosub,nol,noc);% for i=1:nos%     % histogram: how frequently will sentence i occur in each of the conditions%     h = hist(design_all_rand(i,2:end),1:noc);    % generated design%     test = h==t;%     idx = find(test==0);%     if ~isempty(idx)%         fprintf(1,'\nerror with sentence %i\n',i);%     end% end% CHECK the subjects% How often does a given subject encounter each of the 4 condition?% answer: nos / noc times (e.g., 120 / 4 = 30);t = ones(1,noc)* (nos/noc);    % right answer% vector 't' has as many elements as experiment has conditionsfprintf(1,'Throughout the experiment, a given subject will encounter each of the %i conditions %i times.\n',noc,nos/noc);for i=1:nosub    % histogram: how frequently will subject i encounter each of the 8 conditions    h = hist(design_all(:,i+1),1:noc);    % generated design    test = h==t;    idx = find(test==0);    if ~isempty(idx)        fprintf(1,'\nerror with subject %i\n',i);    endend